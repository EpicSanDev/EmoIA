#!/bin/bash

echo "üîß Validation des Corrections EmoIA"
echo "======================================"

echo ""
echo "üì¶ Arr√™t des services..."
docker-compose down

echo ""
echo "üöÄ Red√©marrage des services..."
docker-compose up -d

echo ""
echo "‚è≥ Attente du d√©marrage (30 secondes)..."
sleep 30

echo ""
echo "üß™ Tests de validation..."

# Test 1: API Health Check
echo "1Ô∏è‚É£ Test de sant√© de l'API..."
response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)
if [ "$response" = "200" ]; then
    echo "   ‚úÖ API accessible"
else
    echo "   ‚ùå API non accessible (code: $response)"
fi

# Test 2: API Tasks (TDAH)
echo "2Ô∏è‚É£ Test des t√¢ches TDAH..."
response=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8000/api/tasks/demo-user")
if [ "$response" = "200" ]; then
    echo "   ‚úÖ Endpoint des t√¢ches fonctionnel"
else
    echo "   ‚ùå Endpoint des t√¢ches non fonctionnel (code: $response)"
fi

# Test 3: API Calendar
echo "3Ô∏è‚É£ Test du calendrier..."
response=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8000/api/calendar/demo-user")
if [ "$response" = "200" ]; then
    echo "   ‚úÖ Endpoint du calendrier fonctionnel"
else
    echo "   ‚ùå Endpoint du calendrier non fonctionnel (code: $response)"
fi

# Test 4: API Memories avec DELETE
echo "4Ô∏è‚É£ Test de l'endpoint DELETE des m√©moires..."
response=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE "http://localhost:8000/api/memories/test_memory?user_id=demo-user")
if [ "$response" = "200" ]; then
    echo "   ‚úÖ Endpoint DELETE des m√©moires fonctionnel"
else
    echo "   ‚ùå Endpoint DELETE des m√©moires non fonctionnel (code: $response)"
fi

# Test 5: Frontend
echo "5Ô∏è‚É£ Test du frontend..."
response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
if [ "$response" = "200" ]; then
    echo "   ‚úÖ Frontend accessible"
else
    echo "   ‚ùå Frontend non accessible (code: $response)"
fi

echo ""
echo "üìä V√©rification des logs pour les erreurs corrig√©es..."
echo "Recherche des erreurs dans les logs r√©cents..."

# V√©rifier l'absence des erreurs sp√©cifiques
echo "üîç V√©rification des erreurs TDAH..."
tdah_errors=$(docker-compose logs emoia-api 2>/dev/null | grep -c "has no attribute 'get_tdah_tasks'" || echo "0")
if [ "$tdah_errors" = "0" ]; then
    echo "   ‚úÖ Plus d'erreurs TDAH trouv√©es"
else
    echo "   ‚ùå $tdah_errors erreur(s) TDAH encore pr√©sente(s)"
fi

echo "üîç V√©rification des erreurs WebSocket..."
ws_errors=$(docker-compose logs emoia-api 2>/dev/null | grep -c "WebSocket connection.*failed" || echo "0")
if [ "$ws_errors" = "0" ]; then
    echo "   ‚úÖ Plus d'erreurs WebSocket dans les logs API"
else
    echo "   ‚ö†Ô∏è  $ws_errors erreur(s) WebSocket trouv√©e(s) (normal si frontend pas encore connect√©)"
fi

echo ""
echo "üìã R√©sum√© des corrections appliqu√©es:"
echo "‚úÖ M√©thodes TDAH ajout√©es √† IntelligentMemorySystem"
echo "‚úÖ Gestion des sessions aiohttp am√©lior√©e"
echo "‚úÖ WebSocket analytics ajout√©"
echo "‚úÖ Route DELETE pour les m√©moires ajout√©e"
echo "‚úÖ Configuration nginx am√©lior√©e"
echo "‚úÖ Handler de shutdown ajout√©"

echo ""
echo "üéØ Validation termin√©e!"
echo ""
echo "Pour surveiller les logs en temps r√©el:"
echo "docker-compose logs -f emoia-api"
echo ""
echo "Pour acc√©der √† l'interface:"
echo "Frontend: http://localhost:3000"
echo "API: http://localhost:8000"
echo "Docs API: http://localhost:8000/docs"