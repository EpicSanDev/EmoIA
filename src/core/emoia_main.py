"""
Classe Principale EmoIA - Intelligence Artificielle √âmotionnelle
Orchestration de tous les composants pour une IA √©motionnelle avanc√©e.
"""

import asyncio
import logging
from typing import Dict, List, Optional, Any, Union, Tuple
from datetime import datetime, timedelta
import json
from pathlib import Path

from ..config import Config
from ..emotional import EmotionalState, PersonalityProfile, LocalEmotionAnalyzer, PersonalityAnalyzer
from ..models import LocalLanguageModel
from ..memory import IntelligentMemorySystem, MemoryItem


logger = logging.getLogger(__name__)


class ConversationContext:
    """Contexte d'une conversation avec un utilisateur"""
    
    def __init__(self, user_id: str):
        self.user_id = user_id
        self.conversation_history = []
        self.current_topic = ""
        self.emotional_flow = []
        self.personality_profile = PersonalityProfile()
        self.last_interaction = datetime.now()
        self.conversation_depth = 0
        self.user_preferences = {}
        
    def add_exchange(
        self, 
        user_message: str, 
        ai_response: str, 
        emotional_state: EmotionalState,
        importance: float = 0.5
    ):
        """Ajoute un √©change √† l'historique de conversation"""
        exchange = {
            "timestamp": datetime.now(),
            "user_message": user_message,
            "ai_response": ai_response,
            "emotional_state": emotional_state,
            "importance": importance
        }
        self.conversation_history.append(exchange)
        self.emotional_flow.append(emotional_state)
        self.last_interaction = datetime.now()
        self.conversation_depth += 1
    
    def get_recent_context(self, n: int = 5) -> str:
        """R√©cup√®re le contexte conversationnel r√©cent"""
        recent_exchanges = self.conversation_history[-n:]
        context_parts = []
        
        for exchange in recent_exchanges:
            context_parts.append(f"User: {exchange['user_message']}")
            context_parts.append(f"AI: {exchange['ai_response']}")
        
        return "\n".join(context_parts)
    
    def get_emotional_trend(self) -> Dict[str, float]:
        """Analyse la tendance √©motionnelle r√©cente"""
        if not self.emotional_flow:
            return {}
        
        recent_emotions = self.emotional_flow[-10:]  # 10 derni√®res √©motions
        
        # Calculer les moyennes
        emotion_sums = {}
        for state in recent_emotions:
            for emotion in ['joy', 'sadness', 'anger', 'fear', 'surprise', 'love', 'excitement', 'anxiety', 'contentment', 'curiosity']:
                emotion_sums[emotion] = emotion_sums.get(emotion, 0) + getattr(state, emotion)
        
        # Normaliser
        num_states = len(recent_emotions)
        return {emotion: total / num_states for emotion, total in emotion_sums.items()}


class ProactivityEngine:
    """Moteur de proactivit√© pour d√©cisions intelligentes"""
    
    def __init__(self, config: Config):
        self.config = config
        self.proactivity_rules = []
        self.user_patterns = {}
        
    def should_initiate_conversation(self, user_id: str, context: ConversationContext) -> Tuple[bool, str]:
        """D√©termine si l'IA doit initier une conversation"""
        
        time_since_last = datetime.now() - context.last_interaction
        hours_passed = time_since_last.total_seconds() / 3600
        
        # R√®gles de proactivit√©
        if hours_passed > 24:
            return True, "check_in_daily"
        
        if hours_passed > 6 and context.emotional_flow:
            last_emotion = context.emotional_flow[-1]
            dominant_emotion, intensity = last_emotion.dominant_emotion()
            
            if dominant_emotion in ['sadness', 'anxiety', 'anger'] and intensity > 0.7:
                return True, "emotional_support"
        
        # D√©tecter des patterns d'activit√©
        if user_id in self.user_patterns:
            pattern = self.user_patterns[user_id]
            current_hour = datetime.now().hour
            
            if current_hour in pattern.get('active_hours', []) and hours_passed > 2:
                return True, "activity_pattern"
        
        return False, ""
    
    def generate_proactive_message(
        self, 
        reason: str, 
        context: ConversationContext,
        personality: PersonalityProfile
    ) -> str:
        """G√©n√®re un message proactif appropri√©"""
        
        templates = {
            "check_in_daily": [
                "Bonjour ! Comment allez-vous aujourd'hui ?",
                "Hello ! J'esp√®re que vous passez une bonne journ√©e !",
                "Salut ! Comment vous sentez-vous ce matin ?"
            ],
            "emotional_support": [
                "J'ai remarqu√© que vous sembliez pr√©occup√© lors de notre derni√®re conversation. Comment vous sentez-vous maintenant ?",
                "Je pensais √† vous. Voulez-vous parler de ce qui vous tracasse ?",
                "Je suis l√† si vous avez besoin de parler. Comment √ßa va ?"
            ],
            "activity_pattern": [
                "C'est g√©n√©ralement l'heure o√π vous √™tes actif. Comment se passe votre journ√©e ?",
                "J'esp√®re que vous allez bien ! Quelque chose d'int√©ressant aujourd'hui ?",
                "Bonjour ! Pr√™t pour une nouvelle conversation ?"
            ]
        }
        
        # Adapter selon la personnalit√©
        if personality.extraversion > 0.7:
            # Plus √©nergique pour les extravertis
            return templates[reason][0].replace("Comment", "Comment") + " üòä"
        elif personality.agreeableness > 0.8:
            # Plus bienveillant
            return "Je pensais √† vous et j'esp√®re que tout va bien. " + templates[reason][0].lower()
        else:
            # Standard
            import random
            return random.choice(templates[reason])


class EmoIA:
    """
    Classe principale d'EmoIA - Intelligence Artificielle √âmotionnelle
    Orchestre tous les composants pour une exp√©rience d'IA √©motionnelle compl√®te.
    """
    
    def __init__(self, config: Optional[Config] = None):
        self.config = config or Config()
        
        # Composants principaux
        self.emotion_analyzer = LocalEmotionAnalyzer(self.config.emotional)
        self.personality_analyzer = PersonalityAnalyzer(self.config.emotional)
        self.language_model = LocalLanguageModel(self.config.models)
        self.memory_system = IntelligentMemorySystem(self.config.memory)
        
        # Gestionnaires
        self.conversation_contexts = {}  # user_id -> ConversationContext
        self.proactivity_engine = ProactivityEngine(self.config)
        
        # √âtat global
        self.is_initialized = False
        self.startup_time = datetime.now()
        self.total_interactions = 0
        self.active_users = set()
        
        # Cache et optimisations
        self._response_cache = {}
        self._personality_cache = {}
        
    async def initialize(self):
        """Initialise tous les composants d'EmoIA"""
        try:
            logger.info("üöÄ Initialisation d'EmoIA...")
            
            # Initialiser les composants dans l'ordre
            await self.emotion_analyzer.initialize()
            logger.info("‚úÖ Analyseur d'√©motions initialis√©")
            
            await self.personality_analyzer.initialize()
            logger.info("‚úÖ Analyseur de personnalit√© initialis√©")
            
            await self.language_model.initialize()
            logger.info("‚úÖ Mod√®le de langage local initialis√©")
            
            await self.memory_system.initialize()
            logger.info("‚úÖ Syst√®me de m√©moire intelligent initialis√©")
            
            self.is_initialized = True
            logger.info("üéâ EmoIA enti√®rement initialis√© et pr√™t !")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'initialisation d'EmoIA: {e}")
            raise
    
    async def process_message(
        self,
        user_input: str,
        user_id: str,
        context_data: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        Traite un message utilisateur avec intelligence √©motionnelle compl√®te
        
        Returns:
            Dict contenant la r√©ponse et les m√©tadonn√©es d'analyse
        """
        
        if not self.is_initialized:
            await self.initialize()
        
        try:
            # √âtape 1: R√©cup√©rer ou cr√©er le contexte conversationnel
            if user_id not in self.conversation_contexts:
                self.conversation_contexts[user_id] = ConversationContext(user_id)
            
            context = self.conversation_contexts[user_id]
            
            # √âtape 2: Analyser l'√©motion du message
            emotional_state = await self.emotion_analyzer.analyze_emotion(
                user_input, 
                context.get_recent_context()
            )
            
            # √âtape 3: R√©cup√©rer les m√©moires pertinentes
            relevant_memories = await self.memory_system.retrieve_memories(
                user_input, 
                user_id, 
                k=5
            )
            
            # √âtape 4: Analyser/mettre √† jour le profil de personnalit√©
            user_texts = [ex['user_message'] for ex in context.conversation_history[-20:]]
            user_texts.append(user_input)
            
            if user_id not in self._personality_cache:
                personality_profile = await self.personality_analyzer.analyze_personality(
                    user_texts,
                    context.emotional_flow
                )
                self._personality_cache[user_id] = personality_profile
            else:
                personality_profile = self._personality_cache[user_id]
                # Mettre √† jour p√©riodiquement
                if len(context.conversation_history) % 10 == 0:
                    personality_profile = await self.personality_analyzer.analyze_personality(
                        user_texts,
                        context.emotional_flow
                    )
                    self._personality_cache[user_id] = personality_profile
            
            # √âtape 5: D√©terminer le type de r√©ponse appropri√©
            response_type = self._determine_response_type(emotional_state, personality_profile, context)
            
            # √âtape 6: Pr√©parer le contexte pour la g√©n√©ration
            memory_context = self._format_memory_context(relevant_memories)
            conversation_context = context.get_recent_context()
            
            # √âtape 7: G√©n√©rer la r√©ponse √©motionnellement intelligente
            ai_response = await self.language_model.generate_response(
                user_input=user_input,
                context=f"{conversation_context}\n{memory_context}",
                emotional_state=emotional_state,
                personality=personality_profile,
                response_type=response_type
            )
            
            # √âtape 8: Calculer l'importance de cette interaction
            importance = self._calculate_interaction_importance(
                user_input, ai_response, emotional_state, personality_profile
            )
            
            # √âtape 9: Stocker en m√©moire
            await self.memory_system.store_memory(
                content=f"User: {user_input}\nAI: {ai_response}",
                user_id=user_id,
                importance=importance,
                emotional_state=emotional_state,
                context=conversation_context,
                memory_type="episodic",
                tags=self._extract_tags(user_input, ai_response)
            )
            
            # √âtape 10: Mettre √† jour le contexte
            context.add_exchange(user_input, ai_response, emotional_state, importance)
            context.personality_profile = personality_profile
            
            # √âtape 11: Analyser pour proactivit√© future
            await self._update_proactivity_patterns(user_id, context, emotional_state)
            
            # Statistiques
            self.total_interactions += 1
            self.active_users.add(user_id)
            
            # Retour structur√©
            return {
                "response": ai_response,
                "emotional_analysis": {
                    "detected_emotion": emotional_state.dominant_emotion()[0],
                    "emotion_intensity": emotional_state.dominant_emotion()[1],
                    "emotional_state": emotional_state.__dict__,
                    "confidence": emotional_state.confidence
                },
                "personality_insights": {
                    "profile": personality_profile.__dict__,
                    "dominant_traits": self._get_dominant_traits(personality_profile)
                },
                "interaction_metadata": {
                    "importance": importance,
                    "response_type": response_type,
                    "memories_used": len(relevant_memories),
                    "conversation_depth": context.conversation_depth
                },
                "system_info": {
                    "processing_timestamp": datetime.now().isoformat(),
                    "total_interactions": self.total_interactions
                }
            }
            
        except Exception as e:
            logger.error(f"Erreur lors du traitement du message: {e}")
            
            # R√©ponse de fallback
            return {
                "response": "Je suis d√©sol√©, j'ai rencontr√© une difficult√© technique. Pouvez-vous reformuler votre message ?",
                "emotional_analysis": {"detected_emotion": "neutral", "emotion_intensity": 0.0},
                "personality_insights": {},
                "interaction_metadata": {"importance": 0.1, "response_type": "fallback"},
                "system_info": {"error": str(e)}
            }
    
    def _determine_response_type(
        self, 
        emotional_state: EmotionalState, 
        personality: PersonalityProfile,
        context: ConversationContext
    ) -> str:
        """D√©termine le type de r√©ponse le plus appropri√©"""
        
        emotion, intensity = emotional_state.dominant_emotion()
        
        # R√©ponses bas√©es sur l'√©motion
        if emotion in ['sadness', 'anxiety', 'fear'] and intensity > 0.6:
            return "empathetic"
        
        if emotion in ['joy', 'excitement'] and intensity > 0.7:
            return "enthusiastic"
        
        if emotion == 'curiosity' and intensity > 0.5:
            return "informative"
        
        if emotion == 'anger' and intensity > 0.5:
            return "calming"
        
        # Adaptations selon la personnalit√©
        if personality.creativity > 0.7 and personality.openness > 0.6:
            return "creative"
        
        if personality.conscientiousness > 0.7:
            return "analytical"
        
        if personality.extraversion > 0.7:
            return "engaging"
        
        # Adaptation selon le contexte
        if context.conversation_depth > 10:
            return "deep_conversation"
        
        return "conversational"
    
    def _format_memory_context(self, memories: List[Tuple[MemoryItem, float]]) -> str:
        """Formate les m√©moires pertinentes en contexte textuel"""
        if not memories:
            return ""
        
        context_parts = ["=== M√©moires pertinentes ==="]
        for memory_item, similarity in memories[:3]:  # Top 3 m√©moires
            context_parts.append(f"‚Ä¢ {memory_item.content} (pertinence: {similarity:.2f})")
        
        return "\n".join(context_parts)
    
    def _calculate_interaction_importance(
        self,
        user_input: str,
        ai_response: str,
        emotional_state: EmotionalState,
        personality: PersonalityProfile
    ) -> float:
        """Calcule l'importance d'une interaction pour la m√©moire"""
        
        importance = 0.5  # Base
        
        # Facteurs √©motionnels
        emotion, intensity = emotional_state.dominant_emotion()
        importance += intensity * 0.3
        
        if emotion in ['sadness', 'anxiety', 'joy', 'love']:
            importance += 0.2  # √âmotions importantes
        
        # Facteurs de contenu
        if len(user_input.split()) > 20:  # Message long
            importance += 0.1
        
        if any(word in user_input.lower() for word in ['important', 'grave', 'urgent', 'probl√®me']):
            importance += 0.3
        
        if '?' in user_input:  # Question
            importance += 0.1
        
        # Facteurs de personnalit√©
        if personality.emotional_intelligence > 0.8:
            importance += 0.1  # Utilisateur √©motionnellement intelligent
        
        return min(importance, 1.0)
    
    def _extract_tags(self, user_input: str, ai_response: str) -> List[str]:
        """Extrait des tags pertinents d'une interaction"""
        tags = []
        
        # Tags bas√©s sur le contenu
        content = f"{user_input} {ai_response}".lower()
        
        # Cat√©gories th√©matiques
        if any(word in content for word in ['travail', 'job', 'bureau', 'coll√®gue']):
            tags.append('travail')
        
        if any(word in content for word in ['famille', 'parent', 'enfant', 'fr√®re', 's≈ìur']):
            tags.append('famille')
        
        if any(word in content for word in ['amour', 'relation', 'couple', 'ami']):
            tags.append('relation')
        
        if any(word in content for word in ['sant√©', 'm√©decin', 'malade', 'douleur']):
            tags.append('sant√©')
        
        if any(word in content for word in ['projet', 'objectif', 'but', 'r√™ve']):
            tags.append('objectifs')
        
        # Tags √©motionnels
        if any(word in content for word in ['triste', 'd√©prim√©', 'm√©lancolie']):
            tags.append('tristesse')
        
        if any(word in content for word in ['heureux', 'joyeux', 'content']):
            tags.append('joie')
        
        if any(word in content for word in ['stress', 'anxieux', 'inquiet']):
            tags.append('stress')
        
        return tags
    
    def _get_dominant_traits(self, personality: PersonalityProfile) -> List[str]:
        """Identifie les traits de personnalit√© dominants"""
        traits = []
        
        trait_map = {
            'openness': ('ouvert d\'esprit', 0.6),
            'conscientiousness': ('consciencieux', 0.6),
            'extraversion': ('extraverti', 0.6),
            'agreeableness': ('bienveillant', 0.7),
            'neuroticism': ('sensible √©motionnellement', 0.6),
            'emotional_intelligence': ('√©motionnellement intelligent', 0.7),
            'empathy_level': ('empathique', 0.8),
            'creativity': ('cr√©atif', 0.7),
            'humor_appreciation': ('appr√©cie l\'humour', 0.6),
            'optimism': ('optimiste', 0.6)
        }
        
        for trait, (description, threshold) in trait_map.items():
            if getattr(personality, trait) > threshold:
                traits.append(description)
        
        return traits
    
    async def _update_proactivity_patterns(
        self,
        user_id: str,
        context: ConversationContext,
        emotional_state: EmotionalState
    ):
        """Met √† jour les patterns de proactivit√© pour l'utilisateur"""
        
        current_hour = datetime.now().hour
        
        if user_id not in self.proactivity_engine.user_patterns:
            self.proactivity_engine.user_patterns[user_id] = {
                'active_hours': [],
                'emotional_patterns': {},
                'conversation_preferences': {}
            }
        
        pattern = self.proactivity_engine.user_patterns[user_id]
        
        # Enregistrer l'heure d'activit√©
        if current_hour not in pattern['active_hours']:
            pattern['active_hours'].append(current_hour)
        
        # Pattern √©motionnel
        emotion, intensity = emotional_state.dominant_emotion()
        if emotion not in pattern['emotional_patterns']:
            pattern['emotional_patterns'][emotion] = []
        pattern['emotional_patterns'][emotion].append({
            'intensity': intensity,
            'hour': current_hour,
            'timestamp': datetime.now().isoformat()
        })
    
    async def check_proactivity(self, user_id: str) -> Optional[str]:
        """V√©rifie si l'IA doit √™tre proactive avec cet utilisateur"""
        
        if user_id not in self.conversation_contexts:
            return None
        
        context = self.conversation_contexts[user_id]
        should_initiate, reason = self.proactivity_engine.should_initiate_conversation(user_id, context)
        
        if should_initiate:
            personality = self._personality_cache.get(user_id, PersonalityProfile())
            message = self.proactivity_engine.generate_proactive_message(reason, context, personality)
            return message
        
        return None
    
    async def get_emotional_insights(self, user_id: str, days: int = 30) -> Dict[str, Any]:
        """G√©n√®re des insights √©motionnels pour un utilisateur"""
        
        if user_id not in self.conversation_contexts:
            return {"error": "Utilisateur non trouv√©"}
        
        # R√©cup√©rer la timeline √©motionnelle
        timeline = await self.memory_system.get_emotional_timeline(user_id, days)
        
        if not timeline:
            return {"message": "Pas assez de donn√©es √©motionnelles"}
        
        # Analyser les tendances
        emotions_by_day = {}
        for timestamp, emotional_state in timeline:
            day = timestamp.date().isoformat()
            if day not in emotions_by_day:
                emotions_by_day[day] = []
            emotions_by_day[day].append(emotional_state)
        
        # Calculer les moyennes quotidiennes
        daily_averages = {}
        for day, emotions in emotions_by_day.items():
            avg_emotions = {}
            for emotion in ['joy', 'sadness', 'anger', 'fear', 'anxiety', 'contentment']:
                values = [getattr(state, emotion) for state in emotions]
                avg_emotions[emotion] = sum(values) / len(values)
            daily_averages[day] = avg_emotions
        
        # D√©tecter les tendances
        recent_days = list(daily_averages.keys())[-7:]  # 7 derniers jours
        
        # Insights g√©n√©r√©s
        insights = {
            "period_analyzed": f"{days} derniers jours",
            "total_interactions": len(timeline),
            "emotional_timeline": daily_averages,
            "trends": {
                "most_frequent_emotion": self._get_most_frequent_emotion(timeline),
                "emotional_stability": self._calculate_emotional_stability(timeline),
                "positive_ratio": self._calculate_positive_ratio(timeline)
            },
            "recommendations": self._generate_emotional_recommendations(timeline)
        }
        
        return insights
    
    def _get_most_frequent_emotion(self, timeline: List[Tuple[datetime, EmotionalState]]) -> str:
        """Trouve l'√©motion la plus fr√©quente"""
        emotion_counts = {}
        for _, emotional_state in timeline:
            emotion, _ = emotional_state.dominant_emotion()
            emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1
        
        return max(emotion_counts.keys(), key=lambda k: emotion_counts[k]) if emotion_counts else "neutral"
    
    def _calculate_emotional_stability(self, timeline: List[Tuple[datetime, EmotionalState]]) -> float:
        """Calcule la stabilit√© √©motionnelle (faible variance = plus stable)"""
        if len(timeline) < 2:
            return 1.0
        
        dominant_emotions = [state.dominant_emotion()[1] for _, state in timeline]
        
        # Variance des intensit√©s √©motionnelles
        mean_intensity = sum(dominant_emotions) / len(dominant_emotions)
        variance = sum((x - mean_intensity) ** 2 for x in dominant_emotions) / len(dominant_emotions)
        
        # Convertir en score de stabilit√© (0-1, o√π 1 = tr√®s stable)
        return max(0, 1 - variance)
    
    def _calculate_positive_ratio(self, timeline: List[Tuple[datetime, EmotionalState]]) -> float:
        """Calcule le ratio d'√©motions positives"""
        if not timeline:
            return 0.5
        
        positive_emotions = ['joy', 'love', 'excitement', 'contentment', 'curiosity']
        positive_count = 0
        
        for _, emotional_state in timeline:
            emotion, intensity = emotional_state.dominant_emotion()
            if emotion in positive_emotions and intensity > 0.5:
                positive_count += 1
        
        return positive_count / len(timeline)
    
    def _generate_emotional_recommendations(self, timeline: List[Tuple[datetime, EmotionalState]]) -> List[str]:
        """G√©n√®re des recommandations bas√©es sur l'analyse √©motionnelle"""
        recommendations = []
        
        positive_ratio = self._calculate_positive_ratio(timeline)
        stability = self._calculate_emotional_stability(timeline)
        
        if positive_ratio < 0.4:
            recommendations.append("Essayez d'int√©grer plus d'activit√©s qui vous apportent de la joie dans votre routine quotidienne.")
        
        if stability < 0.5:
            recommendations.append("Vos √©motions semblent fluctuer beaucoup. Des techniques de relaxation pourraient vous aider.")
        
        # Analyser les patterns temporels
        morning_emotions = []
        evening_emotions = []
        
        for timestamp, emotional_state in timeline:
            hour = timestamp.hour
            emotion, intensity = emotional_state.dominant_emotion()
            
            if 6 <= hour <= 12:
                morning_emotions.append((emotion, intensity))
            elif 18 <= hour <= 23:
                evening_emotions.append((emotion, intensity))
        
        if morning_emotions:
            morning_positive = sum(1 for e, i in morning_emotions if e in ['joy', 'contentment', 'excitement'] and i > 0.5)
            if morning_positive / len(morning_emotions) < 0.3:
                recommendations.append("Vos matin√©es semblent difficiles. Une routine matinale positive pourrait vous aider.")
        
        if not recommendations:
            recommendations.append("Votre bien-√™tre √©motionnel semble √©quilibr√©. Continuez ainsi !")
        
        return recommendations
    
    def get_system_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques du syst√®me EmoIA"""
        return {
            "uptime": str(datetime.now() - self.startup_time),
            "total_interactions": self.total_interactions,
            "active_users": len(self.active_users),
            "conversations_active": len(self.conversation_contexts),
            "memory_stats": self.memory_system.get_memory_stats(),
            "model_info": self.language_model.get_model_info(),
            "config_summary": {
                "emotional_intensity": self.config.emotional.emotional_intensity,
                "empathy_threshold": self.config.emotional.empathy_threshold,
                "learning_enabled": self.config.learning.continuous_learning
            }
        }