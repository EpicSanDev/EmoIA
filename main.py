"""
Point d'entr√©e principal pour EmoIA
D√©marrage de l'intelligence artificielle √©motionnelle.
"""

import asyncio
import logging
import sys
from pathlib import Path

# Cr√©er le r√©pertoire logs AVANT la configuration du logging
Path("logs").mkdir(exist_ok=True)

# Ajouter le r√©pertoire src au path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.core import EmoIA
from src.config import Config


# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('logs/emoia.log')
    ]
)

logger = logging.getLogger(__name__)


class EmoIADemo:
    """Interface de d√©monstration pour EmoIA"""
    
    def __init__(self):
        self.emoia = None
        self.user_id = "demo_user"
        
    async def initialize(self):
        """Initialise EmoIA"""
        try:
            # Charger la configuration
            config = Config()
            
            # Cr√©er l'instance EmoIA
            self.emoia = EmoIA(config)
            
            # Initialiser tous les composants
            await self.emoia.initialize()
            
            logger.info("‚ú® EmoIA pr√™t pour les interactions !")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'initialisation: {e}")
            raise
    
    async def run_interactive_mode(self):
        """Mode interactif en ligne de commande"""
        print("ü§ñ EmoIA - Intelligence Artificielle √âmotionnelle")
        print("=" * 50)
        print("Tapez 'quit' pour quitter, 'help' pour l'aide")
        print("=" * 50)
        
        while True:
            try:
                # Saisie utilisateur
                user_input = input("\nüí¨ Vous: ").strip()
                
                if user_input.lower() in ['quit', 'exit', 'q']:
                    print("üëã Au revoir ! Prenez soin de vous.")
                    break
                
                if user_input.lower() == 'help':
                    self.show_help()
                    continue
                
                if user_input.lower() == 'stats':
                    await self.show_stats()
                    continue
                
                if user_input.lower() == 'insights':
                    await self.show_insights()
                    continue
                
                if not user_input:
                    continue
                
                # Traitement par EmoIA
                response_data = await self.emoia.process_message(
                    user_input=user_input,
                    user_id=self.user_id
                )
                
                # Affichage de la r√©ponse
                print(f"\nü§ñ EmoIA: {response_data['response']}")
                
                # Affichage des m√©tadonn√©es (optionnel)
                if response_data.get('emotional_analysis'):
                    emotion_info = response_data['emotional_analysis']
                    print(f"   üìä √âmotion d√©tect√©e: {emotion_info['detected_emotion']} "
                          f"({emotion_info['emotion_intensity']:.2f})")
                
                # V√©rifier la proactivit√©
                proactive_message = await self.emoia.check_proactivity(self.user_id)
                if proactive_message:
                    print(f"\nüí≠ EmoIA (proactif): {proactive_message}")
                
            except KeyboardInterrupt:
                print("\nüëã Au revoir ! Prenez soin de vous.")
                break
            except Exception as e:
                logger.error(f"Erreur: {e}")
                print(f"‚ùå Une erreur s'est produite: {e}")
    
    def show_help(self):
        """Affiche l'aide"""
        help_text = """
üîß Commandes disponibles:
- help: Affiche cette aide
- stats: Affiche les statistiques du syst√®me
- insights: Affiche vos insights √©motionnels
- quit/exit/q: Quitte le programme

üí° Conseils d'utilisation:
- Parlez naturellement, EmoIA comprend vos √©motions
- Plus vous interagissez, mieux EmoIA vous comprend
- EmoIA peut √™tre proactif et vous contacter spontan√©ment
- Vos conversations sont m√©moris√©es pour un suivi personnalis√©
        """
        print(help_text)
    
    async def show_stats(self):
        """Affiche les statistiques syst√®me"""
        try:
            stats = self.emoia.get_system_stats()
            
            print("\nüìà Statistiques EmoIA:")
            print(f"‚è±Ô∏è  Temps de fonctionnement: {stats['uptime']}")
            print(f"üí¨ Total interactions: {stats['total_interactions']}")
            print(f"üë• Utilisateurs actifs: {stats['active_users']}")
            print(f"üß† M√©moires stock√©es: {stats['memory_stats']['long_term_memory_size']}")
            print(f"üé≠ Mod√®le √©motionnel: Activ√© (intensit√© {stats['config_summary']['emotional_intensity']})")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'affichage des stats: {e}")
    
    async def show_insights(self):
        """Affiche les insights √©motionnels"""
        try:
            insights = await self.emoia.get_emotional_insights(self.user_id)
            
            if "error" in insights:
                print(f"‚ùå {insights['error']}")
                return
            
            if "message" in insights:
                print(f"‚ÑπÔ∏è  {insights['message']}")
                return
            
            print(f"\nüß† Insights √âmotionnels ({insights['period_analyzed']}):")
            print(f"üìä Total interactions analys√©es: {insights['total_interactions']}")
            
            trends = insights['trends']
            print(f"üòä √âmotion dominante: {trends['most_frequent_emotion']}")
            print(f"‚öñÔ∏è  Stabilit√© √©motionnelle: {trends['emotional_stability']:.2f}/1.0")
            print(f"üåü Ratio d'√©motions positives: {trends['positive_ratio']:.2f}")
            
            print("\nüí° Recommandations:")
            for i, recommendation in enumerate(insights['recommendations'], 1):
                print(f"  {i}. {recommendation}")
                
        except Exception as e:
            print(f"‚ùå Erreur lors de l'affichage des insights: {e}")


async def main():
    """Fonction principale"""
    
    # Cr√©er les r√©pertoires n√©cessaires
    Path("logs").mkdir(exist_ok=True)
    Path("data").mkdir(exist_ok=True)
    Path("models").mkdir(exist_ok=True)
    Path("cache").mkdir(exist_ok=True)
    
    # Cr√©er et initialiser EmoIA
    demo = EmoIADemo()
    
    try:
        await demo.initialize()
        await demo.run_interactive_mode()
        
    except KeyboardInterrupt:
        print("\nüëã Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"Erreur fatale: {e}")
        print(f"‚ùå Erreur fatale: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    """Point d'entr√©e du programme"""
    
    print("üöÄ D√©marrage d'EmoIA...")
    
    # Ex√©cuter le programme principal
    exit_code = asyncio.run(main())
    sys.exit(exit_code)